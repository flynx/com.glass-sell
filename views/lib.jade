
//- XXX also include the appropriate CSS...


//-
	Usage:
		+JSONTable([<css-class>,][ <col-names>,] <data>)
			[<block>]

		+JSONTable(<data>)
		+JSONTable(<cols>, <data>)
		+JSONTable(<css-class>, <data>)
		+JSONTable(<css-class>, <cols>, <data>)

	<cols> can be:
		- null
		- list of attr names
		- object with:
			<key>: column name
			<value>: attr name or function

	<block>
		if given will be repeated in the last cell per row.

	NOTE: at this point jade does not support block arguments so the block
		has to be generic and figure out what row it is in on the client
		side...
	NOTE: to get around the above restriction it is possible to pass a 
		function to the value of the <cols> and generate an html string,
		but generating html in JS in Jade is a hack ;)
	

mixin JSONTable(a, b, c)
	//- normalize args...
	//- no cls, shift args...
	- if(typeof(a) != typeof('str'))
		- c = b
		- b = a
		- a = ''

	//- format the rest of the args...
	- if(c == null)
		- var obj = b
		- var cols = null
	- else if(d == null)
		- var obj = c
		- var cols = b
	- else
		- var obj = d
		- var cols = b

	//- now for the actual html...
	table(class=cls, border=1, cellspacing=0)
		//- build header column if cols is passed...
		-if(cols && cols.constructor != Array)
			thead
				tr
					-for(var col in cols)
						th= col

					if block
						th

		//- build table body...
		tbody
			each elem in obj
				tr
					if cols
						each attr in cols
							if attr instanceof Function
								td!= attr(elem)
							else
								td= elem[attr]
					else
						each val in elem
							td= val

					if block
						td
							block



//- vim:set ts=4 sw=4 :
