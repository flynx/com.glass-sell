
//- XXX also include the appropriate CSS...

//- 
	Generate a field...
	-------------------------------------------------------------------

	Usage:
		+field(<name>[, <datalist>])

	<name> can be in the following formats:
		- 'name'			- used for both the label and name fields
		- 'label | name'
		- 'label | placeholder | name'

		- ['name']
		- ['label', 'name']
		- ['label', 'placeholder', 'name']
	XXX is this name syntax an overkill???

	<datalist> is a list of options.

mixin field(name, datalist, value)
	//- parse the name...
	- name = name.constructor == Array ? name : name.split('|')

	- if(name.length == 1){
	-	var text = name[0]
	-	var placeholder = text
	-	name = text
	- } else if(name.length == 2) {
	-	var text = name[0].trim()
	-	var placeholder = text
	-	name = name[1].trim()
	- } else {
	-	var text = name[0].trim()
	-	var placeholder = name[1].trim()
	-	name = name[2].trim()
	- }

	- value = value === undefined ? (datalist.length == 1 ? datalist[0] : null) : value

	label= text
		if value
			input(name=name, list=name, placeholder=placeholder, title=placeholder, value=value)
		else
			input(name=name, list=name, placeholder=placeholder, title=placeholder)
		if datalist
			datalist(id=name)
				each e in datalist
					option(value=e)



//-
	Generate a set of fields...
	-------------------------------------------------------------------

	Usage:
		+fields(<data>, <values>)

	<data> format:
		[
			<field-spec>,
			...
		]

	<values> format:
		{
			<name>: <value>,
			...
		}

	<field-spec> format:
		{
			<name>: <datalist>
		}

	for specification of <name> and <datalist> see the +field(..) mixin

	NOTE: if values is given then no default value processing will be 
		done by the field(..) mixin...

mixin fields(data, values)
	each list, name in data
		if values
			+field(name, list, values[name.split('|').pop()] || false)
		else
			+field(name, list)



//-
	Generate a table...
	-------------------------------------------------------------------

	Usage:
		+JSONTable([<css-class>,][ <col-names>,] <data>)
			[<block>]

		+JSONTable(<data>)
		+JSONTable(<cols>, <data>)
		+JSONTable(<css-class>, <data>)
		+JSONTable(<css-class>, <cols>, <data>)

	<cols> can be:
		- null
		- list of attr names
		- object with:
			<key>: column name
			<value>: attr name or function

	<block>
		if given will be repeated in the last cell per row.

	NOTE: at this point jade does not support block arguments so the block
		has to be generic and figure out what row it is in on the client
		side...
	NOTE: to get around the above restriction it is possible to pass a 
		function to the value of the <cols> and generate an html string,
		but generating html in JS in Jade is a hack ;)
	

mixin JSONTable(a, b, c)
	//- normalize args...
	//- no cls, shift args...
	- if(typeof(a) != typeof('str'))
		- c = b
		- b = a
		- a = ''

	//- format the rest of the args...
	- if(c == null)
		- var obj = b
		- var cols = null
	- else if(d == null)
		- var obj = c
		- var cols = b
	- else
		- var obj = d
		- var cols = b

	//- now for the actual html...
	table(class=cls, border=1, cellspacing=0)
		//- build header column if cols is passed...
		-if(cols && cols.constructor != Array)
			thead
				tr
					-for(var col in cols)
						th= col

					if block
						th

		//- build table body...
		tbody
			each elem in obj
				tr
					if cols
						each attr in cols
							if attr instanceof Function
								td!= attr(elem)
							else
								td= elem[attr]
					else
						each val in elem
							td= val

					if block
						td
							block



//- vim:set ts=4 sw=4 :
